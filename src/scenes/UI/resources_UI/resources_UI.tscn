[gd_scene load_steps=11 format=3 uid="uid://bj1h0gk1cpokl"]

[ext_resource type="Script" path="res://src/scenes/UI/resources_UI/resources_UI.gd" id="1_rlwa5"]
[ext_resource type="PackedScene" uid="uid://2sdm36qjxjvo" path="res://resources/meshes/tree.glb" id="2_aoak4"]

[sub_resource type="BoxMesh" id="BoxMesh_37gib"]
size = Vector3(10, 1, 1)

[sub_resource type="BoxMesh" id="BoxMesh_2v4ai"]
size = Vector3(1, 5, 1)

[sub_resource type="BoxShape3D" id="BoxShape3D_pva0v"]
size = Vector3(1, 1, 3.74558)

[sub_resource type="BoxShape3D" id="BoxShape3D_yeglq"]
size = Vector3(1, 4.05518, 10.7939)

[sub_resource type="BoxShape3D" id="BoxShape3D_ucl2l"]
size = Vector3(1, 5, 0.829102)

[sub_resource type="Shader" id="Shader_ritho"]
code = "shader_type spatial;
render_mode unshaded;

uniform float pixelate = 85.0;
uniform float posterize = 3.0;

uniform sampler2D screen_texture: source_color, hint_screen_texture, filter_nearest;
uniform sampler2D depth_texture: source_color, hint_depth_texture, filter_nearest;
uniform sampler2D normal_texture: source_color, hint_normal_roughness_texture, filter_nearest;

float get_depth(vec2 uv, mat4 inv_proj_matrix){
	
	float depth = texture(depth_texture, uv).x;
	
	vec3 ndc = vec3(uv * 2.0 - 1.0, depth); //may change if using opengl backend (?)
	vec4 view = inv_proj_matrix * vec4(ndc, 1.0);
	view.xyz = view.xyz / view.w;
	
	return -view.z; // final depth value
	
}

vec3 colorband(vec3 color){
	float power = 2.0;
	color.x = log(color.x);
	color.y = log(color.y);
	color.z = log(color.z);
	
	return vec3(
		exp(round(color.r * posterize) / posterize), 
		exp(round(color.g * posterize) / posterize),
		exp(round(color.b * posterize) / posterize)
	);
}

//shamelessly stolen from bitbrain
vec3 texturePointSmooth(sampler2D smp, vec2 uv, vec2 pixel_size)
{
	vec2 ddx = dFdx(uv);
	vec2 ddy = dFdy(uv);
	vec2 lxy = sqrt(ddx * ddx + ddy * ddy);
	
	vec2 uv_pixels = uv / pixel_size;
	
	vec2 uv_pixels_floor = round(uv_pixels) - vec2(0.5f);
	vec2 uv_dxy_pixels = uv_pixels - uv_pixels_floor;
	
	uv_dxy_pixels = clamp((uv_dxy_pixels - vec2(0.5f)) * pixel_size / lxy + vec2(0.5f), 0.0f, 1.0f);
	
	uv = uv_pixels_floor * pixel_size;
	
	return textureGrad(smp, uv + uv_dxy_pixels * pixel_size, ddx, ddy).rgb;
}

void vertex() {
	//POSITION = vec4(VERTEX, 1.0);
}

//based on https://www.youtube.com/watch?v=WBoApONC7bM
void fragment() {
	
	vec2 pixel_UV = vec2(SCREEN_UV.x * (VIEWPORT_SIZE.x / VIEWPORT_SIZE.y), SCREEN_UV.y);
	pixel_UV = round(pixel_UV * pixelate) / pixelate;
	pixel_UV.x /= (VIEWPORT_SIZE.x / VIEWPORT_SIZE.y);
	
	vec2 texel_size = vec2(1.0 / pixelate, (1.0 / pixelate));
	texel_size.x /= (VIEWPORT_SIZE.x / VIEWPORT_SIZE.y);
	
	vec3 original = texture(screen_texture, pixel_UV).xyz;
	
	vec3 normal = texture(normal_texture, pixel_UV).xyz * 2.0 - 1.0;
	
	float depth = get_depth(pixel_UV, INV_PROJECTION_MATRIX);
	
	
	//compute color
	vec3 color;
	color = texturePointSmooth(screen_texture, UV, texel_size);
	color = colorband(color);
	
	ALBEDO = color;
	
	//compute outlines
	
	
	vec2 uvs[4] = {
		
		vec2(pixel_UV.x, pixel_UV.y + texel_size.y),
		vec2(pixel_UV.x, pixel_UV.y - texel_size.y),
		vec2(pixel_UV.x + texel_size.x, pixel_UV.y),
		vec2(pixel_UV.x - texel_size.x, pixel_UV.y)
	};
	
	float depth_diff = 0.0;
	for (int i = 0; i<4; ++i){
		float d = get_depth(uvs[i], INV_PROJECTION_MATRIX);
		depth_diff += depth-d;
	}
	
	if (depth_diff > 2.0){
		
		ALBEDO *= 0.1;
	}
	
	float normal_sum = 0.0;
	for (int i = 0; i<4; ++i){
		
		vec3 n = texture(normal_texture, uvs[i]).xyz * 2.0 - 1.0;
		vec3 normal_diff = normal-n;
		
		vec3 normal_edge_bias = vec3(1, 1, 1);
		float normal_bias_diff = dot(normal_diff, normal_edge_bias);
		float normal_indicator = smoothstep(-0.01, 0.01, normal_bias_diff);
		
		normal_sum += dot(normal_diff, normal_diff) * normal_indicator;
	}
	
	float normal_edge = sqrt(normal_sum);
	
	if (normal_edge > depth/100.0){
		
		ALBEDO *= 0.2;
	}
	if (depth > 20.0 && length(ALBEDO.r - color.r) < 0.01) ALPHA = 0.0; //if albedo not modified; means it's background
	//if (depth < 1.0 && ALBEDO == original) ALPHA = 0.0;
	
}


void light() {
	// Called for every pixel for every light affecting the material.
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_hey04"]
render_priority = 0
shader = SubResource("Shader_ritho")
shader_parameter/pixelate = 40.0
shader_parameter/posterize = 3.0

[sub_resource type="QuadMesh" id="QuadMesh_h3iqp"]
size = Vector2(10, 6)

[node name="resource_ui" type="Node3D"]
script = ExtResource("1_rlwa5")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, -0.096115, -0.458113, 0)
visible = false
mesh = SubResource("BoxMesh_37gib")
skeleton = NodePath("../SubViewport/Camera3D")

[node name="MeshInstance3D2" type="MeshInstance3D" parent="."]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, -0.096115, 0.637831, 1.41559)
visible = false
mesh = SubResource("BoxMesh_2v4ai")
skeleton = NodePath("../SubViewport/Camera3D")

[node name="MeshInstance3D3" type="MeshInstance3D" parent="."]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, -0.096115, 0.637831, 5.06866)
visible = false
mesh = SubResource("BoxMesh_2v4ai")
skeleton = NodePath("../SubViewport/Camera3D")

[node name="MeshInstance3D4" type="MeshInstance3D" parent="."]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, -0.096115, 0.637831, -1.80284)
visible = false
mesh = SubResource("BoxMesh_2v4ai")
skeleton = NodePath("../SubViewport/Camera3D")

[node name="MeshInstance3D5" type="MeshInstance3D" parent="."]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, -0.096115, 0.637831, -5.04307)
visible = false
mesh = SubResource("BoxMesh_2v4ai")
skeleton = NodePath("../SubViewport/Camera3D")

[node name="StaticBody3D" type="StaticBody3D" parent="."]

[node name="CollisionShape3D" type="CollisionShape3D" parent="StaticBody3D"]
transform = Transform3D(1, 0, 0, 0, 0.981677, -0.190552, 0, 0.190552, 0.981677, 0, 0.185384, -3.52416)
shape = SubResource("BoxShape3D_pva0v")

[node name="CollisionShape3D8" type="CollisionShape3D" parent="StaticBody3D"]
transform = Transform3D(1, 0, 0, 0, 0.997677, 0.0681198, 0, -0.0681198, 0.997677, 0, -0.620351, -0.0789428)
shape = SubResource("BoxShape3D_pva0v")

[node name="CollisionShape3D9" type="CollisionShape3D" parent="StaticBody3D"]
transform = Transform3D(1, 0, 0, 0, 0.986013, 0.166665, 0, -0.166665, 0.986013, 0, -0.153447, 3.36596)
shape = SubResource("BoxShape3D_pva0v")

[node name="CollisionShape3D6" type="CollisionShape3D" parent="StaticBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -1.00802, 1.03361, 0)
shape = SubResource("BoxShape3D_yeglq")

[node name="CollisionShape3D7" type="CollisionShape3D" parent="StaticBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.991984, 1.03361, 0)
shape = SubResource("BoxShape3D_yeglq")

[node name="CollisionShape3D2" type="CollisionShape3D" parent="StaticBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.26403, 5)
shape = SubResource("BoxShape3D_ucl2l")

[node name="CollisionShape3D3" type="CollisionShape3D" parent="StaticBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.26403, 1.39791)
shape = SubResource("BoxShape3D_ucl2l")

[node name="CollisionShape3D5" type="CollisionShape3D" parent="StaticBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.97155, -1.76428)
shape = SubResource("BoxShape3D_ucl2l")

[node name="CollisionShape3D4" type="CollisionShape3D" parent="StaticBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.26403, -5)
shape = SubResource("BoxShape3D_ucl2l")

[node name="RemoteTransform3D" type="RemoteTransform3D" parent="."]
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, -2.7, 1.99, 0)
remote_path = NodePath("../SubViewport/Camera3D")

[node name="SubViewport" type="SubViewport" parent="."]
transparent_bg = true
size = Vector2i(930, 512)

[node name="Camera3D" type="Camera3D" parent="SubViewport"]
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, -2.7, 1.99, 0)
projection = 1
size = 5.5

[node name="MeshInstance3D" type="MeshInstance3D" parent="SubViewport/Camera3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -6.76967e-08, 0, -1.54872)
material_override = SubResource("ShaderMaterial_hey04")
mesh = SubResource("QuadMesh_h3iqp")

[node name="OmniLight3D" type="OmniLight3D" parent="SubViewport/Camera3D/MeshInstance3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0313545, -0.483515, -0.265728)
light_color = Color(0.882353, 0.54902, 0.839216, 1)
light_energy = 16.0
omni_range = 8.006
omni_attenuation = 1.07177

[node name="mutagen" type="Marker3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 5.00637, -3.44994)

[node name="oil" type="Marker3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 5.00637, 3.35439)

[node name="metal" type="Marker3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 5.00637, 0)

[node name="tree2" parent="." instance=ExtResource("2_aoak4")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -5, 0, -4)
